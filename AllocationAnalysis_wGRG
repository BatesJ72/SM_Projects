USE [S3Reporting]
GO
/****** Object:  StoredProcedure [dbo].[JB_AllocationAnalysis_wGRG]    Script Date: 8/7/2020 1:25:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		<JB>
-- Create date: <12-12-19>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[JB_AllocationAnalysis_wGRG]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

-- 1.Gets a list of all GRG claimants who should be excluded because they don't have a non-GRG pending lien
-- 1a. Finds claimants who have a pending nonGRG lien in a grg case
	-- drop table #GRGData1

select sub3.ClientId
into #GRGData1
from	(
		select	ClientId, Final, Pending
		from	(
					select sub.* 
					from	(
								select	clientid, clientfirstname, clientlastname, 
										id as LienId, LienType, StatusId, StatusName, Stage, 
										case
											when stage like 'closed' or stage like 'final%' then 'Final'
											else 'Pending'
											end as F_or_P,
										InactiveReasonName, InactiveReasonId, 
										AssignedUserId, UserName
								from	fullproductviews
								where	casename like '%grg%'
											and (InactiveReasonId is null or InactiveReasonId not in (1, 3))
											and (StatusId is null or StatusId not in (2))
								) as sub
					where sub.F_or_P = 'Pending' and sub.AssignedUserId <> 141
					) as sub2
	
			PIVOT(count(sub2.LienId) for sub2.F_or_P in ([Final], [Pending])) as pivot1
			) as sub3
where sub3.Pending > 0

		--select * from #GRGData1

-- 1b. Gets a list of all claimants in a GRG case, then excludes the ones in the previous query

select Id 
into #GRGData2
from clientsviews
where casename like '%GRG%' and id not in (select clientid from #GRGData1)

-- 2. Create temp table with all settlement amount date changes and Client Ids
-- drop table #AllData


select	sub2.*
into #AllData
from (
		select sub.*, ROW_NUMBER () OVER (PARTITION BY ClientId ORDER BY ChangeDate desc) as RowNumber
		from	(
				select T.*, 
						case
							when T.CurrentSA is null or T.CurrentSA = '' then 72 
							else min(C.ChangeDate) 
							end as ChangeDate
				from (
						select 	CFT.CaseId, C.Name as CaseName, C.Tort, C.SettlementFundingDate, FPV.CaseUserDisplayName, CFT.ClientId, CFT.SettlementAmount,
								Clients.SettlementAmount as CurrentSA, Clients.FinalizedStatusId, C.IsMt
						from	clientsfacttable as CFT
									LEFT OUTER JOIN Cases as C on CFT.CaseId=C.Id
									LEFT OUTER JOIN FullProductViews as FPV on FPV.ClientId=CFT.ClientId
									LEFT OUTER JOIN Clients on Clients.Id=CFT.ClientId 
						where	CFT.clientid not in (select Id from #GRGData2)
						group by	CFT.CaseId, C.Name, FPV.CaseUserDisplayName, CFT.ClientId, CFT.SettlementAmount, C.Tort, C.SettlementFundingDate, 
									Clients.SettlementAmount, Clients.FinalizedStatusId, C.IsMT
						) as T
				
					LEFT OUTER JOIN ClientsFactTable as C on C.ClientId =T.ClientId and C.SettlementAmount=T.SettlementAmount
		
				group by T.CaseId, T.CaseName, T.CaseUserDisplayName, T.ClientId, T.SettlementAmount, T.Tort, T.SettlementFundingDate, T.CurrentSA, 
							T.FinalizedStatusId, T.IsMt
				) as sub
			
			where	sub.CaseName not like '%hold%' and sub.CaseName not like '%closed%' and sub.IsMT = 1
					and sub.CaseUserDisplayName not like 'Global' and sub.CaseUserDisplayName not like 'Complete' 
					and sub.CaseUserDisplayName not like 'Inactive' and sub.CaseUserDisplayName not like 'ClearMeasure Admin'
					and (sub.FinalizedStatusId is null or sub.FinalizedStatusId = 1)
					and sub.SettlementAmount is not null and sub.SettlementAmount <> ''
			) as sub2
where sub2.RowNumber = 1 


		-- select * from #AllData order by CurrentSA


-- 3. Get a distinct list of all CaseIds and dates the SA changed
-- drop table #Case_SADates

select	distinct CaseId, CaseName, Tort, SettlementFundingDate, ChangeDate
into	#Case_SADates
from	#AllData


		--select * from #Case_SADates where changedate = 72.72
		--select * from #AllData where changedate is null
		

-- 4. Get a count of client ids that have that change date for the case
-- drop table #Case_ClientCount

select	CD.*, count(AD.ClientId) as ClientCount, AD.CaseUserDisplayName
into	#Case_ClientCount
from	#AllData as AD
			LEFT OUTER JOIN #Case_SADates as CD on CD.CaseId=AD.CaseId and CD.ChangeDate=AD.ChangeDate
group by CD.CaseId, CD.CaseName, CD.ChangeDate, CD.Tort, CD.SettlementFundingDate, AD.CaseUserDisplayName


	--select * from	#Case_ClientCount
	--select sum(ClientCount) from #Case_ClientCount


--5. Determine if the change date was more than 6 months ago, 3-6 months, less than 3 months, or null


select	sub2.CaseId, sub2.CaseName, sub2.CaseUserDisplayName, sub2.Tort, sub2.SettlementFundingDate, sub2.Time_Since_SA, sum(sub2.ClientCount) as TotalClients
from	(
		select	sub.*, 
					case 
						when sub.Months_Since_SA_Updated = 72 then 'Not Allocated'
						when sub.Months_Since_SA_Updated < 90 then 'Fewer than 3 months ago'
						when sub.Months_Since_SA_Updated >= 90 and sub.Months_Since_SA_Updated <= 180 then '3 months and 1 day to 6 months ago'
						when sub.Months_Since_SA_Updated > 180 and sub.Months_Since_SA_Updated <= 270 then '6 months and 1 day to 9 months ago'
						when sub.Months_Since_SA_Updated > 270 then 'More than 9 months and 1 day ago'
						else 'Look Into'
						end as [Time_Since_SA]
		from (
				select	*, 
						case
							when changedate = 72 then 72
							else DATEDIFF(day, ChangeDate, GETDATE()) 
							end as Months_Since_SA_Updated
				from	#Case_ClientCount
			) as sub

		) as sub2
group by sub2.CaseId, sub2.CaseName, sub2.Time_Since_SA, sub2.Tort, sub2.SettlementFundingDate, sub2.CaseUserDisplayName
order by sub2.CaseId, sub2.Time_Since_SA




--drop table #AllData
--drop table #Case_SADates
--drop table #Case_ClientCount
--drop table #GRGData1
--drop table #GRGData2

END
