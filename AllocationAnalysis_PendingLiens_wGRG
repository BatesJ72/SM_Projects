
	
-- 1.Gets a list of all GRG claimants who should be excluded because they don't have a non-GRG pending lien
-- 1a. Finds claimants who have a pending nonGRG lien in a grg case
	-- drop table #GRGData1

select sub3.ClientId
into #GRGData1
from	(
		select	ClientId, Final, Pending
		from	(
					select sub.* 
					from	(
								select	clientid, clientfirstname, clientlastname, 
										id as LienId, LienType, StatusId, StatusName, Stage, 
										case
											when stage like 'closed' or stage like 'final%' then 'Final'
											else 'Pending'
											end as F_or_P,
										InactiveReasonName, InactiveReasonId, 
										AssignedUserId, UserName
								from	fullproductviews
								where	casename like '%grg%'
											and (InactiveReasonId is null or InactiveReasonId not in (1, 3))
											and (StatusId is null or StatusId not in (2))
								) as sub
					where sub.F_or_P = 'Pending' and sub.AssignedUserId <> 141
					) as sub2
	
			PIVOT(count(sub2.LienId) for sub2.F_or_P in ([Final], [Pending])) as pivot1
			) as sub3
where sub3.Pending > 0

		--select * from #GRGData1

-- 1b. Gets a list of all claimants in a GRG case, then excludes the ones in the previous query

select Id 
into #GRGData2
from clientsviews
where casename like '%GRG%' and id not in (select clientid from #GRGData1)




--1. (Allocation Analysis - Original) Create temp table with all settlement amount date changes and Client Ids
	--drop table #AllData


select	sub2.*
into #AllData
from (
		select sub.*, ROW_NUMBER () OVER (PARTITION BY ClientId ORDER BY ChangeDate desc) as RowNumber
		from	(
				select T.*, 
						case
							when T.CurrentSA is null or T.CurrentSA = '' then 72 
							else min(C.ChangeDate) 
							end as ChangeDate
				from (
						select 	CFT.CaseId, C.Name as CaseName, C.Tort, C.SettlementFundingDate, FPV.CaseUserDisplayName, CFT.ClientId, CFT.SettlementAmount,
								Clients.SettlementAmount as CurrentSA, Clients.FinalizedStatusId, C.IsMt
						from	clientsfacttable as CFT
									LEFT OUTER JOIN Cases as C on CFT.CaseId=C.Id
									LEFT OUTER JOIN FullProductViews as FPV on FPV.ClientId=CFT.ClientId
									LEFT OUTER JOIN Clients on Clients.Id=CFT.ClientId 
						where	CFT.clientid not in (select Id from #GRGData2)
						group by	CFT.CaseId, C.Name, FPV.CaseUserDisplayName, CFT.ClientId, CFT.SettlementAmount, C.Tort, C.SettlementFundingDate, 
									Clients.SettlementAmount, Clients.FinalizedStatusId, C.IsMT
						) as T
				
					LEFT OUTER JOIN ClientsFactTable as C on C.ClientId =T.ClientId and C.SettlementAmount=T.SettlementAmount
		
				group by T.CaseId, T.CaseName, T.CaseUserDisplayName, T.ClientId, T.SettlementAmount, T.Tort, T.SettlementFundingDate, T.CurrentSA, 
							T.FinalizedStatusId, T.IsMt
				) as sub
			
			where	sub.CaseName not like '%hold%' and sub.CaseName not like '%closed%' and sub.IsMT = 1
					and sub.CaseUserDisplayName not like 'Global' and sub.CaseUserDisplayName not like 'Complete' 
					and sub.CaseUserDisplayName not like 'Inactive' and sub.CaseUserDisplayName not like 'ClearMeasure Admin'
					and (sub.FinalizedStatusId is null or sub.FinalizedStatusId = 1)
					and sub.SettlementAmount is not null and sub.SettlementAmount <> ''
			) as sub2
where sub2.RowNumber = 1 



--2. (Allocation Analysis - Original) Determine if the change date was more than 6 months ago, 3-6 months, less than 3 months, or null
	--drop table #AllocationAnalysis


select	sub.*, 
			case 
				when sub.Months_Since_SA_Updated = 72 then 'Not Allocated'
				when sub.Months_Since_SA_Updated < 90 then 'Fewer than 3 months ago'
				when sub.Months_Since_SA_Updated >= 90 and sub.Months_Since_SA_Updated <= 180 then '3 months and 1 day to 6 months ago'
				when sub.Months_Since_SA_Updated > 180 and sub.Months_Since_SA_Updated <= 270 then '6 months and 1 day to 9 months ago'
				when sub.Months_Since_SA_Updated > 270 then 'More than 9 months and 1 day ago'
				else 'Look Into'
				end as [Time_Since_SA]
into	#AllocationAnalysis
from (
		select	*, 
				case
					when changedate = 72 then 72
					else DATEDIFF(day, ChangeDate, GETDATE()) 
					end as Months_Since_SA_Updated
		from	#AllData
	) as sub



--3. (Pending Liens Pivot) Create a temp table that has all the pending lien pivot data
	--drop table #PendingPivot


select	Main2.ClientId, Main2.Pending,
		Case
			When Main2.Pending = 0 then 'No liens pending'
			When Main2.Pending = 1 then 'One lien pending'
			When Main2.Pending = 2 then 'Two liens pending'
			Else 'More than two liens pending'
			End As [Pending_Analysis]
into	#PendingPivot
from	(
		select	* 
		from	(
				select	sub.ClientId, sub.LienId, sub.Stage_Summary
				from	(
						select	FPV.CaseName, FPV.CaseId,
								FPV.ClientId, FPV.ClientSettlementAmount,
								Case
									When FPV.ClientSettlementAmount is null or FPV.ClientSettlementAmount = '' then 'Unallocated'
									Else 'Allocated'
									End as [Allocated_Summary],
								FPV.Id as LienId, FPV.LienType, FPV.StatusName,FPV.StatusId, FPV.Stage, FPV.ClosedReason, 
								Case
									When FPV.Stage not like 'Final%' and FPV.Stage not like 'Closed' and (FPV.StatusId is null or FPV.StatusId <> 2) then 'Pending'
									Else 'Final'
									End as [Stage_Summary]

						from	fullproductviews as FPV
									LEFT OUTER JOIN Clients on Clients.Id = FPV.ClientId
									LEFT OUTER JOIN Cases as C on C.Id = FPV.CaseId

						where	C.Name not like '%hold%' and c.name not like '%closed%' and c.IsMT = 1
								and FPV.CaseUserDisplayName not like 'Global' and FPV.CaseUserDisplayName not like 'Complete' 
								and FPV.CaseUserDisplayName not like 'Inactive' and FPV.CaseUserDisplayName not like 'ClearMeasure Admin'
								and (Clients.FinalizedStatusId is null or Clients.FinalizedStatusId = 1)
								--and Clients.SettlementAmount is not null and Clients.SettlementAmount <> ''
								and Clients.id not in (select Id from #GRGData2)
						) as sub
				where sub.Allocated_Summary = 'Allocated'
				) as Main
		pivot (count(LienId) for Stage_Summary in ([Final], [Pending])) as Pivot1
	 ) as Main2
	
	


--4. Combine the Allocation Analysis data and the Pending Lien Pivot Data

select A.*, P.Pending, P.Pending_Analysis
from	#PendingPivot as P 
			LEFT OUTER JOIN #AllocationAnalysis as A on P.ClientId=A.ClientId

